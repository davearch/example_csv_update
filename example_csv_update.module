<?php

/**
 * @file
 * Contains example_csv_update.module
 */

use Drupal\migrate\Plugin\MigrateSourceInterface;
use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\migrate\Row;
use Drupal\migrate\MigrateSkipRowException;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function example_csv_update_help($route_name, RouteMatchInterface $route_match)
{
  switch ($route_name) {
      // Main module help for the migrate_source_ui module.
    case 'help.page.example_csv_update':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Update Content Translations via CSV') . '</p>';
      return $output;
  }
}


/**
 * Implements hook_migrate_prepare_row().
 */
function example_csv_update_migrate_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  if ($migration->id() == 'example_csv_content_type_migration' || $migration->id() == 'example_csv_term_migration') {
    $message = NULL;
    $save_to_map = TRUE;
    $type = 'status';

    $text_fields = ['title', 'body', 'misc', 'term_name'];

    $language = $row->getSourceProperty('content_langcode');

    if (!$language) {
      $message = 'No langcode found in source.';
      $type = 'error';
    } elseif ($language === "en") {
      $message = 'English content, no translation needed.';
      $save_to_map = FALSE;
    }

    foreach ($text_fields as $field) {
      if (!$row->hasSourceProperty($field)) {
        $message = 'Missing translatable text field.';
        $type = 'error';
        break;
      }

      // encode each field to avoid SQL format errors.
      if (mb_detect_encoding($row->getSourceProperty($field)) != 'UTF-8') {
        $row->setSourceProperty($field, utf8_encode($row->getSourceProperty($field)));
      }
    }

    if ($message) {
      if ($type === 'error') {
        $pre = 'Example CSV Row No. ' . $row->get('counter') . ': ';
        $source->messenger()->addMessage($pre . $message, $type);
      }
      throw new MigrateSkipRowException($message, $save_to_map);
    }
  }
}
